// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object MessagesPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PlatformBleInputProperty(val raw: Int) {
  DISABLED(0),
  NOTIFICATION(1),
  INDICATION(2);

  companion object {
    fun ofRaw(raw: Int): PlatformBleInputProperty? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PlatformBleOutputProperty(val raw: Int) {
  WITH_RESPONSE(0),
  WITHOUT_RESPONSE(1);

  companion object {
    fun ofRaw(raw: Int): PlatformBleOutputProperty? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PlatformConnectionState(val raw: Int) {
  DISCONNECTED(0),
  CONNECTING(1),
  CONNECTED(2),
  DISCONNECTING(3),
  UNKNOWN(4);

  companion object {
    fun ofRaw(raw: Int): PlatformConnectionState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PlatformGattStatus(val raw: Int) {
  SUCCESS(0),
  FAILURE(1);

  companion object {
    fun ofRaw(raw: Int): PlatformGattStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlatformCompanionDevice (
  val id: String,
  val name: String,
  val associationId: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlatformCompanionDevice {
      val id = pigeonVar_list[0] as String
      val name = pigeonVar_list[1] as String
      val associationId = pigeonVar_list[2] as Long
      return PlatformCompanionDevice(id, name, associationId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      name,
      associationId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PlatformCompanionDevice) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlatformScanResult (
  val name: String,
  val deviceId: String,
  val manufacturerDataHead: ByteArray,
  val manufacturerData: ByteArray,
  val rssi: Long,
  val serviceUuids: List<String>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlatformScanResult {
      val name = pigeonVar_list[0] as String
      val deviceId = pigeonVar_list[1] as String
      val manufacturerDataHead = pigeonVar_list[2] as ByteArray
      val manufacturerData = pigeonVar_list[3] as ByteArray
      val rssi = pigeonVar_list[4] as Long
      val serviceUuids = pigeonVar_list[5] as List<String>
      return PlatformScanResult(name, deviceId, manufacturerDataHead, manufacturerData, rssi, serviceUuids)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      name,
      deviceId,
      manufacturerDataHead,
      manufacturerData,
      rssi,
      serviceUuids,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PlatformScanResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlatformConnectionStateChange (
  val deviceId: String,
  val state: PlatformConnectionState,
  val gattStatus: PlatformGattStatus
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlatformConnectionStateChange {
      val deviceId = pigeonVar_list[0] as String
      val state = pigeonVar_list[1] as PlatformConnectionState
      val gattStatus = pigeonVar_list[2] as PlatformGattStatus
      return PlatformConnectionStateChange(deviceId, state, gattStatus)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      deviceId,
      state,
      gattStatus,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PlatformConnectionStateChange) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlatformServiceDiscovered (
  val deviceId: String,
  val serviceUuid: String,
  val characteristics: List<String>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlatformServiceDiscovered {
      val deviceId = pigeonVar_list[0] as String
      val serviceUuid = pigeonVar_list[1] as String
      val characteristics = pigeonVar_list[2] as List<String>
      return PlatformServiceDiscovered(deviceId, serviceUuid, characteristics)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      deviceId,
      serviceUuid,
      characteristics,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PlatformServiceDiscovered) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlatformMtuChange (
  val deviceId: String,
  val mtu: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlatformMtuChange {
      val deviceId = pigeonVar_list[0] as String
      val mtu = pigeonVar_list[1] as Long
      return PlatformMtuChange(deviceId, mtu)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      deviceId,
      mtu,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PlatformMtuChange) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlatformCharacteristicValueChanged (
  val deviceId: String,
  val characteristicId: String,
  val value: ByteArray
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlatformCharacteristicValueChanged {
      val deviceId = pigeonVar_list[0] as String
      val characteristicId = pigeonVar_list[1] as String
      val value = pigeonVar_list[2] as ByteArray
      return PlatformCharacteristicValueChanged(deviceId, characteristicId, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      deviceId,
      characteristicId,
      value,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PlatformCharacteristicValueChanged) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlatformL2CapSocketEvent (
  val deviceId: String,
  val data: ByteArray? = null,
  val error: String? = null,
  val opened: Boolean? = null,
  val closed: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlatformL2CapSocketEvent {
      val deviceId = pigeonVar_list[0] as String
      val data = pigeonVar_list[1] as ByteArray?
      val error = pigeonVar_list[2] as String?
      val opened = pigeonVar_list[3] as Boolean?
      val closed = pigeonVar_list[4] as Boolean?
      return PlatformL2CapSocketEvent(deviceId, data, error, opened, closed)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      deviceId,
      data,
      error,
      opened,
      closed,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PlatformL2CapSocketEvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PlatformBleInputProperty.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PlatformBleOutputProperty.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PlatformConnectionState.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PlatformGattStatus.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlatformCompanionDevice.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlatformScanResult.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlatformConnectionStateChange.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlatformServiceDiscovered.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlatformMtuChange.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlatformCharacteristicValueChanged.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlatformL2CapSocketEvent.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PlatformBleInputProperty -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is PlatformBleOutputProperty -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is PlatformConnectionState -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is PlatformGattStatus -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is PlatformCompanionDevice -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PlatformScanResult -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is PlatformConnectionStateChange -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is PlatformServiceDiscovered -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is PlatformMtuChange -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is PlatformCharacteristicValueChanged -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is PlatformL2CapSocketEvent -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val MessagesPigeonMethodCodec = StandardMethodCodec(MessagesPigeonCodec())


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface QuickBlueApi {
  fun isBluetoothAvailable(): Boolean
  fun startScan(serviceUuids: List<String>?, manufacturerData: Map<Long, ByteArray>?)
  fun stopScan()
  fun connect(deviceId: String)
  fun disconnect(deviceId: String)
  fun companionAssociate(deviceId: String?, serviceUuids: List<String>?, manufacturerData: Map<Long, ByteArray>?, callback: (Result<PlatformCompanionDevice?>) -> Unit)
  fun companionDisassociate(associationId: Long)
  fun getCompanionAssociations(): List<PlatformCompanionDevice>
  fun discoverServices(deviceId: String)
  fun setNotifiable(deviceId: String, service: String, characteristic: String, bleInputProperty: PlatformBleInputProperty)
  fun readValue(deviceId: String, service: String, characteristic: String)
  fun writeValue(deviceId: String, service: String, characteristic: String, value: ByteArray, bleOutputProperty: PlatformBleOutputProperty)
  fun requestMtu(deviceId: String, expectedMtu: Long): Long
  fun openL2cap(deviceId: String, psm: Long, callback: (Result<Unit>) -> Unit)
  fun closeL2cap(deviceId: String)
  fun writeL2cap(deviceId: String, value: ByteArray)

  companion object {
    /** The codec used by QuickBlueApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `QuickBlueApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: QuickBlueApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.isBluetoothAvailable$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isBluetoothAvailable())
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.startScan$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val serviceUuidsArg = args[0] as List<String>?
            val manufacturerDataArg = args[1] as Map<Long, ByteArray>?
            val wrapped: List<Any?> = try {
              api.startScan(serviceUuidsArg, manufacturerDataArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.stopScan$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopScan()
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.connect$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.connect(deviceIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.disconnect$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.disconnect(deviceIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.companionAssociate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String?
            val serviceUuidsArg = args[1] as List<String>?
            val manufacturerDataArg = args[2] as Map<Long, ByteArray>?
            api.companionAssociate(deviceIdArg, serviceUuidsArg, manufacturerDataArg) { result: Result<PlatformCompanionDevice?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.companionDisassociate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val associationIdArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.companionDisassociate(associationIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.getCompanionAssociations$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getCompanionAssociations())
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.discoverServices$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.discoverServices(deviceIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.setNotifiable$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val serviceArg = args[1] as String
            val characteristicArg = args[2] as String
            val bleInputPropertyArg = args[3] as PlatformBleInputProperty
            val wrapped: List<Any?> = try {
              api.setNotifiable(deviceIdArg, serviceArg, characteristicArg, bleInputPropertyArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.readValue$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val serviceArg = args[1] as String
            val characteristicArg = args[2] as String
            val wrapped: List<Any?> = try {
              api.readValue(deviceIdArg, serviceArg, characteristicArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.writeValue$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val serviceArg = args[1] as String
            val characteristicArg = args[2] as String
            val valueArg = args[3] as ByteArray
            val bleOutputPropertyArg = args[4] as PlatformBleOutputProperty
            val wrapped: List<Any?> = try {
              api.writeValue(deviceIdArg, serviceArg, characteristicArg, valueArg, bleOutputPropertyArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.requestMtu$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val expectedMtuArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.requestMtu(deviceIdArg, expectedMtuArg))
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.openL2cap$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val psmArg = args[1] as Long
            api.openL2cap(deviceIdArg, psmArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                reply.reply(MessagesPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.closeL2cap$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.closeL2cap(deviceIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.quick_blue.QuickBlueApi.writeL2cap$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val valueArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              api.writeL2cap(deviceIdArg, valueArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

private class MessagesPigeonStreamHandler<T>(
    val wrapper: MessagesPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface MessagesPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class ScanResultsStreamHandler : MessagesPigeonEventChannelWrapper<PlatformScanResult> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: ScanResultsStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.quick_blue.QuickBlueEventApi.scanResults"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = MessagesPigeonStreamHandler<PlatformScanResult>(streamHandler)
      EventChannel(messenger, channelName, MessagesPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
abstract class MtuChangedStreamHandler : MessagesPigeonEventChannelWrapper<PlatformMtuChange> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: MtuChangedStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.quick_blue.QuickBlueEventApi.mtuChanged"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = MessagesPigeonStreamHandler<PlatformMtuChange>(streamHandler)
      EventChannel(messenger, channelName, MessagesPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
abstract class L2CapSocketEventsStreamHandler : MessagesPigeonEventChannelWrapper<PlatformL2CapSocketEvent> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: L2CapSocketEventsStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.quick_blue.QuickBlueEventApi.l2CapSocketEvents"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = MessagesPigeonStreamHandler<PlatformL2CapSocketEvent>(streamHandler)
      EventChannel(messenger, channelName, MessagesPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class QuickBlueFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by QuickBlueFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
  }
  fun onConnectionStateChange(stateChangeArg: PlatformConnectionStateChange, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.quick_blue.QuickBlueFlutterApi.onConnectionStateChange$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateChangeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(MessagesPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onServiceDiscovered(serviceDiscoveredArg: PlatformServiceDiscovered, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.quick_blue.QuickBlueFlutterApi.onServiceDiscovered$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(serviceDiscoveredArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(MessagesPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onCharacteristicValueChanged(valueChangedArg: PlatformCharacteristicValueChanged, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.quick_blue.QuickBlueFlutterApi.onCharacteristicValueChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(valueChangedArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(MessagesPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
