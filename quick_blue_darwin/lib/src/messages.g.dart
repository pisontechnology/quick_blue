// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum PlatformBleInputProperty {
  disabled,
  notification,
  indication,
}

enum PlatformBleOutputProperty {
  withResponse,
  withoutResponse,
}

enum PlatformConnectionState {
  disconnected,
  connecting,
  connected,
  disconnecting,
  unknown,
}

enum PlatformGattStatus {
  success,
  failure,
}

class Peripheral {
  Peripheral({
    required this.id,
    required this.name,
  });

  String id;

  String name;

  List<Object?> _toList() {
    return <Object?>[
      id,
      name,
    ];
  }

  Object encode() {
    return _toList();  }

  static Peripheral decode(Object result) {
    result as List<Object?>;
    return Peripheral(
      id: result[0]! as String,
      name: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Peripheral || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PlatformScanResult {
  PlatformScanResult({
    required this.name,
    required this.deviceId,
    required this.manufacturerDataHead,
    required this.manufacturerData,
    required this.rssi,
    required this.serviceUuids,
  });

  String name;

  String deviceId;

  Uint8List manufacturerDataHead;

  Uint8List manufacturerData;

  int rssi;

  List<String> serviceUuids;

  List<Object?> _toList() {
    return <Object?>[
      name,
      deviceId,
      manufacturerDataHead,
      manufacturerData,
      rssi,
      serviceUuids,
    ];
  }

  Object encode() {
    return _toList();  }

  static PlatformScanResult decode(Object result) {
    result as List<Object?>;
    return PlatformScanResult(
      name: result[0]! as String,
      deviceId: result[1]! as String,
      manufacturerDataHead: result[2]! as Uint8List,
      manufacturerData: result[3]! as Uint8List,
      rssi: result[4]! as int,
      serviceUuids: (result[5] as List<Object?>?)!.cast<String>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PlatformScanResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PlatformConnectionStateChange {
  PlatformConnectionStateChange({
    required this.deviceId,
    required this.state,
    required this.gattStatus,
  });

  String deviceId;

  PlatformConnectionState state;

  PlatformGattStatus gattStatus;

  List<Object?> _toList() {
    return <Object?>[
      deviceId,
      state,
      gattStatus,
    ];
  }

  Object encode() {
    return _toList();  }

  static PlatformConnectionStateChange decode(Object result) {
    result as List<Object?>;
    return PlatformConnectionStateChange(
      deviceId: result[0]! as String,
      state: result[1]! as PlatformConnectionState,
      gattStatus: result[2]! as PlatformGattStatus,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PlatformConnectionStateChange || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PlatformServiceDiscovered {
  PlatformServiceDiscovered({
    required this.deviceId,
    required this.serviceUuid,
    required this.characteristics,
  });

  String deviceId;

  String serviceUuid;

  List<String> characteristics;

  List<Object?> _toList() {
    return <Object?>[
      deviceId,
      serviceUuid,
      characteristics,
    ];
  }

  Object encode() {
    return _toList();  }

  static PlatformServiceDiscovered decode(Object result) {
    result as List<Object?>;
    return PlatformServiceDiscovered(
      deviceId: result[0]! as String,
      serviceUuid: result[1]! as String,
      characteristics: (result[2] as List<Object?>?)!.cast<String>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PlatformServiceDiscovered || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PlatformMtuChange {
  PlatformMtuChange({
    required this.deviceId,
    required this.mtu,
  });

  String deviceId;

  int mtu;

  List<Object?> _toList() {
    return <Object?>[
      deviceId,
      mtu,
    ];
  }

  Object encode() {
    return _toList();  }

  static PlatformMtuChange decode(Object result) {
    result as List<Object?>;
    return PlatformMtuChange(
      deviceId: result[0]! as String,
      mtu: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PlatformMtuChange || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PlatformCharacteristicValueChanged {
  PlatformCharacteristicValueChanged({
    required this.deviceId,
    required this.characteristicId,
    required this.value,
  });

  String deviceId;

  String characteristicId;

  Uint8List value;

  List<Object?> _toList() {
    return <Object?>[
      deviceId,
      characteristicId,
      value,
    ];
  }

  Object encode() {
    return _toList();  }

  static PlatformCharacteristicValueChanged decode(Object result) {
    result as List<Object?>;
    return PlatformCharacteristicValueChanged(
      deviceId: result[0]! as String,
      characteristicId: result[1]! as String,
      value: result[2]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PlatformCharacteristicValueChanged || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PlatformL2CapSocketEvent {
  PlatformL2CapSocketEvent({
    required this.deviceId,
    this.data,
    this.error,
    this.opened,
    this.closed,
  });

  String deviceId;

  Uint8List? data;

  String? error;

  bool? opened;

  bool? closed;

  List<Object?> _toList() {
    return <Object?>[
      deviceId,
      data,
      error,
      opened,
      closed,
    ];
  }

  Object encode() {
    return _toList();  }

  static PlatformL2CapSocketEvent decode(Object result) {
    result as List<Object?>;
    return PlatformL2CapSocketEvent(
      deviceId: result[0]! as String,
      data: result[1] as Uint8List?,
      error: result[2] as String?,
      opened: result[3] as bool?,
      closed: result[4] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PlatformL2CapSocketEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is PlatformBleInputProperty) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is PlatformBleOutputProperty) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is PlatformConnectionState) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is PlatformGattStatus) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is Peripheral) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is PlatformScanResult) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is PlatformConnectionStateChange) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is PlatformServiceDiscovered) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is PlatformMtuChange) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is PlatformCharacteristicValueChanged) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is PlatformL2CapSocketEvent) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlatformBleInputProperty.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlatformBleOutputProperty.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlatformConnectionState.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlatformGattStatus.values[value];
      case 133: 
        return Peripheral.decode(readValue(buffer)!);
      case 134: 
        return PlatformScanResult.decode(readValue(buffer)!);
      case 135: 
        return PlatformConnectionStateChange.decode(readValue(buffer)!);
      case 136: 
        return PlatformServiceDiscovered.decode(readValue(buffer)!);
      case 137: 
        return PlatformMtuChange.decode(readValue(buffer)!);
      case 138: 
        return PlatformCharacteristicValueChanged.decode(readValue(buffer)!);
      case 139: 
        return PlatformL2CapSocketEvent.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

class QuickBlueApi {
  /// Constructor for [QuickBlueApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  QuickBlueApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<List<Peripheral>> getConnectedPeripherals(List<String> serviceUuids) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.getConnectedPeripherals$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[serviceUuids]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Peripheral>();
    }
  }

  Future<bool> isBluetoothAvailable() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.isBluetoothAvailable$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> startScan({List<String>? serviceUuids, Map<int, Uint8List>? manufacturerData}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.startScan$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[serviceUuids, manufacturerData]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopScan() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.stopScan$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect(String deviceId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.connect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(String deviceId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.disconnect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> discoverServices(String deviceId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.discoverServices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setNotifiable(String deviceId, String service, String characteristic, PlatformBleInputProperty bleInputProperty) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.setNotifiable$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId, service, characteristic, bleInputProperty]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> readValue(String deviceId, String service, String characteristic) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.readValue$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId, service, characteristic]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> writeValue(String deviceId, String service, String characteristic, Uint8List value, PlatformBleOutputProperty bleOutputProperty) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.writeValue$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId, service, characteristic, value, bleOutputProperty]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> openL2cap(String deviceId, int psm) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.openL2cap$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId, psm]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> closeL2cap(String deviceId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.closeL2cap$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> writeL2cap(String deviceId, Uint8List value) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.writeL2cap$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId, value]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

Stream<PlatformScanResult> scanResults( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel scanResultsChannel =
      EventChannel('dev.flutter.pigeon.quick_blue_darwin.QuickBlueEventApi.scanResults$instanceName', pigeonMethodCodec);
  return scanResultsChannel.receiveBroadcastStream().map((dynamic event) {
    return event as PlatformScanResult;
  });
}
    
Stream<PlatformMtuChange> mtuChanged( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel mtuChangedChannel =
      EventChannel('dev.flutter.pigeon.quick_blue_darwin.QuickBlueEventApi.mtuChanged$instanceName', pigeonMethodCodec);
  return mtuChangedChannel.receiveBroadcastStream().map((dynamic event) {
    return event as PlatformMtuChange;
  });
}
    
Stream<PlatformL2CapSocketEvent> l2CapSocketEvents( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel l2CapSocketEventsChannel =
      EventChannel('dev.flutter.pigeon.quick_blue_darwin.QuickBlueEventApi.l2CapSocketEvents$instanceName', pigeonMethodCodec);
  return l2CapSocketEventsChannel.receiveBroadcastStream().map((dynamic event) {
    return event as PlatformL2CapSocketEvent;
  });
}
    

abstract class QuickBlueFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onConnectionStateChange(PlatformConnectionStateChange stateChange);

  void onServiceDiscovered(PlatformServiceDiscovered serviceDiscovered);

  void onCharacteristicValueChanged(PlatformCharacteristicValueChanged valueChanged);

  static void setUp(QuickBlueFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onConnectionStateChange$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onConnectionStateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlatformConnectionStateChange? arg_stateChange = (args[0] as PlatformConnectionStateChange?);
          assert(arg_stateChange != null,
              'Argument for dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onConnectionStateChange was null, expected non-null PlatformConnectionStateChange.');
          try {
            api.onConnectionStateChange(arg_stateChange!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onServiceDiscovered$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onServiceDiscovered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlatformServiceDiscovered? arg_serviceDiscovered = (args[0] as PlatformServiceDiscovered?);
          assert(arg_serviceDiscovered != null,
              'Argument for dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onServiceDiscovered was null, expected non-null PlatformServiceDiscovered.');
          try {
            api.onServiceDiscovered(arg_serviceDiscovered!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onCharacteristicValueChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onCharacteristicValueChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlatformCharacteristicValueChanged? arg_valueChanged = (args[0] as PlatformCharacteristicValueChanged?);
          assert(arg_valueChanged != null,
              'Argument for dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onCharacteristicValueChanged was null, expected non-null PlatformCharacteristicValueChanged.');
          try {
            api.onCharacteristicValueChanged(arg_valueChanged!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
