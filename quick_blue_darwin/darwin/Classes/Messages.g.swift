// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashMessages(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum PlatformBleInputProperty: Int {
  case disabled = 0
  case notification = 1
  case indication = 2
}

enum PlatformBleOutputProperty: Int {
  case withResponse = 0
  case withoutResponse = 1
}

enum PlatformConnectionState: Int {
  case disconnected = 0
  case connecting = 1
  case connected = 2
  case disconnecting = 3
  case unknown = 4
}

enum PlatformGattStatus: Int {
  case success = 0
  case failure = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct Peripheral: Hashable {
  var id: String
  var name: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Peripheral? {
    let id = pigeonVar_list[0] as! String
    let name = pigeonVar_list[1] as! String

    return Peripheral(
      id: id,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
    ]
  }
  static func == (lhs: Peripheral, rhs: Peripheral) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlatformScanResult: Hashable {
  var name: String
  var deviceId: String
  var manufacturerDataHead: FlutterStandardTypedData
  var manufacturerData: FlutterStandardTypedData
  var rssi: Int64
  var serviceUuids: [String]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PlatformScanResult? {
    let name = pigeonVar_list[0] as! String
    let deviceId = pigeonVar_list[1] as! String
    let manufacturerDataHead = pigeonVar_list[2] as! FlutterStandardTypedData
    let manufacturerData = pigeonVar_list[3] as! FlutterStandardTypedData
    let rssi = pigeonVar_list[4] as! Int64
    let serviceUuids = pigeonVar_list[5] as! [String]

    return PlatformScanResult(
      name: name,
      deviceId: deviceId,
      manufacturerDataHead: manufacturerDataHead,
      manufacturerData: manufacturerData,
      rssi: rssi,
      serviceUuids: serviceUuids
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      deviceId,
      manufacturerDataHead,
      manufacturerData,
      rssi,
      serviceUuids,
    ]
  }
  static func == (lhs: PlatformScanResult, rhs: PlatformScanResult) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlatformConnectionStateChange: Hashable {
  var deviceId: String
  var state: PlatformConnectionState
  var gattStatus: PlatformGattStatus


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PlatformConnectionStateChange? {
    let deviceId = pigeonVar_list[0] as! String
    let state = pigeonVar_list[1] as! PlatformConnectionState
    let gattStatus = pigeonVar_list[2] as! PlatformGattStatus

    return PlatformConnectionStateChange(
      deviceId: deviceId,
      state: state,
      gattStatus: gattStatus
    )
  }
  func toList() -> [Any?] {
    return [
      deviceId,
      state,
      gattStatus,
    ]
  }
  static func == (lhs: PlatformConnectionStateChange, rhs: PlatformConnectionStateChange) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlatformServiceDiscovered: Hashable {
  var deviceId: String
  var serviceUuid: String
  var characteristics: [String]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PlatformServiceDiscovered? {
    let deviceId = pigeonVar_list[0] as! String
    let serviceUuid = pigeonVar_list[1] as! String
    let characteristics = pigeonVar_list[2] as! [String]

    return PlatformServiceDiscovered(
      deviceId: deviceId,
      serviceUuid: serviceUuid,
      characteristics: characteristics
    )
  }
  func toList() -> [Any?] {
    return [
      deviceId,
      serviceUuid,
      characteristics,
    ]
  }
  static func == (lhs: PlatformServiceDiscovered, rhs: PlatformServiceDiscovered) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlatformMtuChange: Hashable {
  var deviceId: String
  var mtu: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PlatformMtuChange? {
    let deviceId = pigeonVar_list[0] as! String
    let mtu = pigeonVar_list[1] as! Int64

    return PlatformMtuChange(
      deviceId: deviceId,
      mtu: mtu
    )
  }
  func toList() -> [Any?] {
    return [
      deviceId,
      mtu,
    ]
  }
  static func == (lhs: PlatformMtuChange, rhs: PlatformMtuChange) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlatformCharacteristicValueChanged: Hashable {
  var deviceId: String
  var characteristicId: String
  var value: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PlatformCharacteristicValueChanged? {
    let deviceId = pigeonVar_list[0] as! String
    let characteristicId = pigeonVar_list[1] as! String
    let value = pigeonVar_list[2] as! FlutterStandardTypedData

    return PlatformCharacteristicValueChanged(
      deviceId: deviceId,
      characteristicId: characteristicId,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      deviceId,
      characteristicId,
      value,
    ]
  }
  static func == (lhs: PlatformCharacteristicValueChanged, rhs: PlatformCharacteristicValueChanged) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlatformL2CapSocketEvent: Hashable {
  var deviceId: String
  var data: FlutterStandardTypedData? = nil
  var error: String? = nil
  var opened: Bool? = nil
  var closed: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PlatformL2CapSocketEvent? {
    let deviceId = pigeonVar_list[0] as! String
    let data: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[1])
    let error: String? = nilOrValue(pigeonVar_list[2])
    let opened: Bool? = nilOrValue(pigeonVar_list[3])
    let closed: Bool? = nilOrValue(pigeonVar_list[4])

    return PlatformL2CapSocketEvent(
      deviceId: deviceId,
      data: data,
      error: error,
      opened: opened,
      closed: closed
    )
  }
  func toList() -> [Any?] {
    return [
      deviceId,
      data,
      error,
      opened,
      closed,
    ]
  }
  static func == (lhs: PlatformL2CapSocketEvent, rhs: PlatformL2CapSocketEvent) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PlatformBleInputProperty(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PlatformBleOutputProperty(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PlatformConnectionState(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PlatformGattStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      return Peripheral.fromList(self.readValue() as! [Any?])
    case 134:
      return PlatformScanResult.fromList(self.readValue() as! [Any?])
    case 135:
      return PlatformConnectionStateChange.fromList(self.readValue() as! [Any?])
    case 136:
      return PlatformServiceDiscovered.fromList(self.readValue() as! [Any?])
    case 137:
      return PlatformMtuChange.fromList(self.readValue() as! [Any?])
    case 138:
      return PlatformCharacteristicValueChanged.fromList(self.readValue() as! [Any?])
    case 139:
      return PlatformL2CapSocketEvent.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PlatformBleInputProperty {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? PlatformBleOutputProperty {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? PlatformConnectionState {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? PlatformGattStatus {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? Peripheral {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? PlatformScanResult {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? PlatformConnectionStateChange {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? PlatformServiceDiscovered {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? PlatformMtuChange {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? PlatformCharacteristicValueChanged {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? PlatformL2CapSocketEvent {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}

var messagesPigeonMethodCodec = FlutterStandardMethodCodec(readerWriter: MessagesPigeonCodecReaderWriter());

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol QuickBlueApi {
  func getConnectedPeripherals(serviceUuids: [String]) throws -> [Peripheral]
  func isBluetoothAvailable() throws -> Bool
  func startScan(serviceUuids: [String]?, manufacturerData: [Int64: FlutterStandardTypedData]?) throws
  func stopScan() throws
  func connect(deviceId: String) throws
  func disconnect(deviceId: String) throws
  func discoverServices(deviceId: String) throws
  func setNotifiable(deviceId: String, service: String, characteristic: String, bleInputProperty: PlatformBleInputProperty) throws
  func readValue(deviceId: String, service: String, characteristic: String) throws
  func writeValue(deviceId: String, service: String, characteristic: String, value: FlutterStandardTypedData, bleOutputProperty: PlatformBleOutputProperty) throws
  func openL2cap(deviceId: String, psm: Int64) throws
  func closeL2cap(deviceId: String) throws
  func writeL2cap(deviceId: String, value: FlutterStandardTypedData) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class QuickBlueApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `QuickBlueApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: QuickBlueApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getConnectedPeripheralsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.getConnectedPeripherals\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getConnectedPeripheralsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let serviceUuidsArg = args[0] as! [String]
        do {
          let result = try api.getConnectedPeripherals(serviceUuids: serviceUuidsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getConnectedPeripheralsChannel.setMessageHandler(nil)
    }
    let isBluetoothAvailableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.isBluetoothAvailable\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isBluetoothAvailableChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isBluetoothAvailable()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isBluetoothAvailableChannel.setMessageHandler(nil)
    }
    let startScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.startScan\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startScanChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let serviceUuidsArg: [String]? = nilOrValue(args[0])
        let manufacturerDataArg: [Int64: FlutterStandardTypedData]? = nilOrValue(args[1])
        do {
          try api.startScan(serviceUuids: serviceUuidsArg, manufacturerData: manufacturerDataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startScanChannel.setMessageHandler(nil)
    }
    let stopScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.stopScan\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopScanChannel.setMessageHandler { _, reply in
        do {
          try api.stopScan()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopScanChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.connect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        do {
          try api.connect(deviceId: deviceIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.disconnect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        do {
          try api.disconnect(deviceId: deviceIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let discoverServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.discoverServices\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverServicesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        do {
          try api.discoverServices(deviceId: deviceIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      discoverServicesChannel.setMessageHandler(nil)
    }
    let setNotifiableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.setNotifiable\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setNotifiableChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let serviceArg = args[1] as! String
        let characteristicArg = args[2] as! String
        let bleInputPropertyArg = args[3] as! PlatformBleInputProperty
        do {
          try api.setNotifiable(deviceId: deviceIdArg, service: serviceArg, characteristic: characteristicArg, bleInputProperty: bleInputPropertyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setNotifiableChannel.setMessageHandler(nil)
    }
    let readValueChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.readValue\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readValueChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let serviceArg = args[1] as! String
        let characteristicArg = args[2] as! String
        do {
          try api.readValue(deviceId: deviceIdArg, service: serviceArg, characteristic: characteristicArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      readValueChannel.setMessageHandler(nil)
    }
    let writeValueChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.writeValue\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeValueChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let serviceArg = args[1] as! String
        let characteristicArg = args[2] as! String
        let valueArg = args[3] as! FlutterStandardTypedData
        let bleOutputPropertyArg = args[4] as! PlatformBleOutputProperty
        do {
          try api.writeValue(deviceId: deviceIdArg, service: serviceArg, characteristic: characteristicArg, value: valueArg, bleOutputProperty: bleOutputPropertyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      writeValueChannel.setMessageHandler(nil)
    }
    let openL2capChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.openL2cap\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openL2capChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let psmArg = args[1] as! Int64
        do {
          try api.openL2cap(deviceId: deviceIdArg, psm: psmArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      openL2capChannel.setMessageHandler(nil)
    }
    let closeL2capChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.closeL2cap\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      closeL2capChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        do {
          try api.closeL2cap(deviceId: deviceIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      closeL2capChannel.setMessageHandler(nil)
    }
    let writeL2capChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.quick_blue_darwin.QuickBlueApi.writeL2cap\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeL2capChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let valueArg = args[1] as! FlutterStandardTypedData
        do {
          try api.writeL2cap(deviceId: deviceIdArg, value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      writeL2capChannel.setMessageHandler(nil)
    }
  }
}

private class PigeonStreamHandler<ReturnType>: NSObject, FlutterStreamHandler {
  private let wrapper: PigeonEventChannelWrapper<ReturnType>
  private var pigeonSink: PigeonEventSink<ReturnType>? = nil

  init(wrapper: PigeonEventChannelWrapper<ReturnType>) {
    self.wrapper = wrapper
  }

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink)
    -> FlutterError?
  {
    pigeonSink = PigeonEventSink<ReturnType>(events)
    wrapper.onListen(withArguments: arguments, sink: pigeonSink!)
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    pigeonSink = nil
    wrapper.onCancel(withArguments: arguments)
    return nil
  }
}

class PigeonEventChannelWrapper<ReturnType> {
  func onListen(withArguments arguments: Any?, sink: PigeonEventSink<ReturnType>) {}
  func onCancel(withArguments arguments: Any?) {}
}

class PigeonEventSink<ReturnType> {
  private let sink: FlutterEventSink

  init(_ sink: @escaping FlutterEventSink) {
    self.sink = sink
  }

  func success(_ value: ReturnType) {
    sink(value)
  }

  func error(code: String, message: String?, details: Any?) {
    sink(FlutterError(code: code, message: message, details: details))
  }

  func endOfStream() {
    sink(FlutterEndOfEventStream)
  }

}

class ScanResultsStreamHandler: PigeonEventChannelWrapper<PlatformScanResult> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: ScanResultsStreamHandler) {
    var channelName = "dev.flutter.pigeon.quick_blue_darwin.QuickBlueEventApi.scanResults"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<PlatformScanResult>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: messagesPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
class MtuChangedStreamHandler: PigeonEventChannelWrapper<PlatformMtuChange> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: MtuChangedStreamHandler) {
    var channelName = "dev.flutter.pigeon.quick_blue_darwin.QuickBlueEventApi.mtuChanged"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<PlatformMtuChange>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: messagesPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
class L2CapSocketEventsStreamHandler: PigeonEventChannelWrapper<PlatformL2CapSocketEvent> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: L2CapSocketEventsStreamHandler) {
    var channelName = "dev.flutter.pigeon.quick_blue_darwin.QuickBlueEventApi.l2CapSocketEvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<PlatformL2CapSocketEvent>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: messagesPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol QuickBlueFlutterApiProtocol {
  func onConnectionStateChange(stateChange stateChangeArg: PlatformConnectionStateChange, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onServiceDiscovered(serviceDiscovered serviceDiscoveredArg: PlatformServiceDiscovered, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCharacteristicValueChanged(valueChanged valueChangedArg: PlatformCharacteristicValueChanged, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class QuickBlueFlutterApi: QuickBlueFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func onConnectionStateChange(stateChange stateChangeArg: PlatformConnectionStateChange, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onConnectionStateChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateChangeArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onServiceDiscovered(serviceDiscovered serviceDiscoveredArg: PlatformServiceDiscovered, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onServiceDiscovered\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([serviceDiscoveredArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onCharacteristicValueChanged(valueChanged valueChangedArg: PlatformCharacteristicValueChanged, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.quick_blue_darwin.QuickBlueFlutterApi.onCharacteristicValueChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([valueChangedArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
